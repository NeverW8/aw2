name: Build and Release

on:
  pull_request:
    branches:
      - master
    types:
      - closed
  workflow_dispatch:

jobs:
  build:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: aw2_linux_amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: aw2_darwin_arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched to access tags

      - name: Get the latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=TAG::$TAG"
          echo "Latest tag: $TAG"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build binary
        run: |
          go build -o ${{ matrix.binary_name }} main.go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Extract release notes
        id: extract_notes
        run: |
          TAG=${{ steps.get_tag.outputs.TAG }}
          awk "/## \[${TAG}\]/,/## \[/" CHANGELOG.md | sed '$d' > RELEASE_NOTES.md
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: ${{ steps.get_tag.outputs.TAG }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          GH_ASSETS_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.get_tag.outputs.TAG }} --jq '.upload_url' | sed 's/{.*}//')
          echo "Uploading ${{ matrix.binary_name }} to $GH_ASSETS_URL"
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @${{ matrix.binary_name }} \
            "$GH_ASSETS_URL?name=${{ matrix.binary_name }}"
        env:
          GH_TOKEN: ${{ secrets.PAT }}


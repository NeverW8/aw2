name: Build and Release

on:
  pull_request:
    branches:
      - master
    types:
      - closed
  workflow_dispatch:

jobs:
  build:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: aw2_linux_amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: aw2_darwin_arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Latest tag: $TAG"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build binary
        run: |
          go build -o ${{ matrix.binary_name }} main.go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Extract release notes
        id: extract_notes
        run: |
          TAG=${{ env.TAG }}
          awk "/## \\[${TAG}\\]/,/^## \\[/" CHANGELOG.md | sed '$d' > RELEASE_NOTES.md
        shell: bash

      - name: Create or Update GitHub Release
        id: create_or_update_release
        run: |
          TAG=${{ env.TAG }}
          RELEASE_NOTES=$(cat RELEASE_NOTES.md)
          EXISTING_RELEASE=$(gh release view $TAG --json url --jq '.url' || echo "null")
          if [ "$EXISTING_RELEASE" = "null" ]; then
            gh release create $TAG ${{ matrix.binary_name }} -t $TAG -n "$RELEASE_NOTES"
          else
            gh release edit $TAG -t $TAG -n "$RELEASE_NOTES"
            gh release upload $TAG ${{ matrix.binary_name }} --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

